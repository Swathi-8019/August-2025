class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        v = len(graph)
        color = [0] * v

        for i in range(v):
            if color[i] == 0:
                if not self.bfs(graph, i, color):
                    return False
        return True
    def bfs(self, graph, start, color):
        q = deque()
        q.append(start)
        color[start] = 1
        while q:
            curr = q.popleft()
            for neighbor in graph[curr]:
                if color[neighbor] == 0:
                    color[neighbor] = 2 if color[curr] == 1 else 1
                    q.append(neighbor)
                elif color[neighbor] == color[curr]:
                    return False
        return True
